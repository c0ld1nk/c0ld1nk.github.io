<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>遥乡书屋</title>
    <link>https://c0ld1nk.github.io/</link>
    <description>Recent content on 遥乡书屋</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 01 Jun 2025 16:22:12 +0800</lastBuildDate>
    <atom:link href="https://c0ld1nk.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BFT</title>
      <link>https://c0ld1nk.github.io/docs/htb/sherlock/bft/</link>
      <pubDate>Sun, 01 Jun 2025 16:22:12 +0800</pubDate>
      <guid>https://c0ld1nk.github.io/docs/htb/sherlock/bft/</guid>
      <description>&lt;p&gt;解压密码为hacktheblue&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在本期福尔摩斯探案中，您将深入了解 MFT（主文件表）取证技术。我们将介绍用于分析 MFT 痕迹以识别恶意活动的知名工具与方法论。在分析过程中，您将使用 MFTECmd 工具解析提供的 MFT 文件，通过 TimeLine Explorer 打开并分析解析结果，并借助十六进制编辑器从 MFT 中恢复文件内容。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;MFT，全称Master File Table，即主文件表，它是NTFS文件系统的核心。它是包含了NTFS卷中所有文件信息的数据库，在$MFT中每个文件（包括MFT本身）至少有一个MFT，记录着该文件的各种信息。这些信息被称为属性。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;NTFS使用MFT条目定义它们对应的文件，有关文件的所有信息，比如大小、时间、权限等都存在MFT条目中，或者由MFT条目描述存储在MFT外部的空间中。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;MFT由一个个MFT项（也称为文件记录(File Record)）组成，每个MFT项占用1024字节的空间。这个概念相当于Linux中的inode，File Record在$MFT文件中物理上是连续的，且从0开始编号，每个MFT项的前部几十个字节有着固定的头结构，用来描述本MFT项的相关信息。后面的字节存放着“属性”。(-via 百度百科)&lt;/p&gt;&#xA;&lt;h1 id=&#34;task1&#34;&gt;Task1 &lt;a href=&#34;#task1&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;西蒙·斯塔克在 2 月 13 日遭到攻击者针对。他从邮件中的链接下载了一个 ZIP 文件。请问他从该链接下载的 ZIP 文件名称是什么？&lt;/p&gt;&#xA;&lt;p&gt;Stage-20240213T093324Z-001.zip&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;下载工具&lt;a href=&#34;https://ericzimmerman.github.io/#!index.md&#34; rel=&#34;external&#34; target=&#34;_blank&#34;&gt;MftCmd&lt;svg width=&#34;16&#34; height=&#34;16&#34; viewBox=&#34;0 0 24 24&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z&#34;/&gt;&lt;/svg&gt;&lt;/a&gt;来提取MFT条目，或者直接RStudio提取文件内容也能找到(不推荐，因为文件数据流没了)&lt;/p&gt;</description>
    </item>
    <item>
      <title>BoardLight</title>
      <link>https://c0ld1nk.github.io/docs/htb/%E9%9D%B6%E5%9C%BA/boardlight/</link>
      <pubDate>Sat, 31 May 2025 20:00:16 +0800</pubDate>
      <guid>https://c0ld1nk.github.io/docs/htb/%E9%9D%B6%E5%9C%BA/boardlight/</guid>
      <description>&lt;h1 id=&#34;信息搜集&#34;&gt;信息搜集 &lt;a href=&#34;#%e4%bf%a1%e6%81%af%e6%90%9c%e9%9b%86&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;ip：10.10.11.11&#xA;nmap：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xA;  &lt;pre id=&#34;bff3f95&#34; class=&#34;language-bash &#34;&gt;&#xA;  &lt;code&gt;nmap -T4 -A -v ip&lt;/code&gt;&#xA;  &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531201709370.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;访问80端口&#xA;除了一个邮箱域名没有别的发现&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531202117912.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;将ip和域名添加到hosts文件里，爆破一下子域名&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xA;  &lt;pre id=&#34;59fcc59&#34; class=&#34;language-bash &#34;&gt;&#xA;  &lt;code&gt;gobuster vhost -u http://board.htb --append-domain -w C:\Users\Administrator\Desktop\Dictionary-Of-Pentesting-master\Subdomain\wydomain_top3000.txt&lt;/code&gt;&#xA;  &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531201140133.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;将这个也添加到hosts文件&#xA;访问发现是登录界面，尝试弱口令&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;admin:admin&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;搜索dolibarr 17.0.0的漏洞，找到CVE-2023-30253&#xA;&lt;a href=&#34;https://github.com/dollarboysushil/Dolibarr-17.0.0-Exploit-CVE-2023-30253&#34; rel=&#34;external&#34; target=&#34;_blank&#34;&gt;https://github.com/dollarboysushil/Dolibarr-17.0.0-Exploit-CVE-2023-30253&lt;svg width=&#34;16&#34; height=&#34;16&#34; viewBox=&#34;0 0 24 24&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z&#34;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Origins</title>
      <link>https://c0ld1nk.github.io/docs/htb/sherlock/origins/</link>
      <pubDate>Fri, 30 May 2025 20:22:29 +0800</pubDate>
      <guid>https://c0ld1nk.github.io/docs/htb/sherlock/origins/</guid>
      <description>&lt;p&gt;解压密码为hacktheblue&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Forela 公司近期发生了一起重大安全事件。攻击者从其内部 S3 存储桶中窃取了约 20GB 数据，并正对该公司实施勒索。在根源分析过程中，一台 FTP 服务器被怀疑是攻击源头。调查发现该服务器同样遭到入侵，部分数据被窃取，进而导致整个网络环境遭受进一步渗透。现提供一份最小化的 PCAP 数据包文件，您的任务是寻找暴力破解和数据外泄的证据。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;task1&#34;&gt;Task1 &lt;a href=&#34;#task1&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;攻击者的 IP 地址是什么？&#xA;15.206.185.207&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;先过滤ftp协议&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/HTB/Origins-1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;发现就两个ip，一个内网一个公网，答案就是公网的ip&lt;/p&gt;&#xA;&lt;h1 id=&#34;task2&#34;&gt;Task2 &lt;a href=&#34;#task2&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;获取更多关于攻击者的信息至关重要，即使准确性不高。利用攻击者所用 IP 地址的地理定位数据，他们来自哪个城市？&#xA;Mumbai&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;查询上一题的ip&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/HTB/Origins-2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task3&#34;&gt;Task3 &lt;a href=&#34;#task3&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;备份服务器使用了哪种 FTP 应用程序？请输入完整名称及版本号。（格式：名称 版本）&#xA;vsFTPd 3.0.5&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;前几个数据包就能看见&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/HTB/Origins-3.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task4&#34;&gt;Task4 &lt;a href=&#34;#task4&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;攻击者已对服务器发起暴力破解攻击。这次攻击是何时开始的？&#xA;2024-05-03 04:12:54&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;很明显的爆破行为，前几个都是一个时间，点卡查看时间转化为UTC即可&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/HTB/Origins-4.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task5&#34;&gt;Task5 &lt;a href=&#34;#task5&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;攻击者用于获取访问权限的正确凭证是什么？（格式：用户名:密码）&#xA;forela-ftp:ftprocks69$&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;一直翻数据包，找到有&lt;code&gt;Login successful&lt;/code&gt;的&#xA;追踪这个数据包就能找到&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/HTB/Origins-5.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task6&#34;&gt;Task6 &lt;a href=&#34;#task6&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;攻击者从服务器窃取了文件。用于下载远程文件的 FTP 命令是什么？&#xA;RETR&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;462号数据包开始&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/HTB/Origins-6.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;以二进制模式开始传输数据，下面的FTPdata就是传输的文件&lt;/p&gt;&#xA;&lt;h1 id=&#34;task7&#34;&gt;Task7 &lt;a href=&#34;#task7&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;攻击者成功获取了备份 SSH 服务器的凭证。该 SSH 服务器的密码是什么？&#xA;**B@ckup2024!**&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bumblebee</title>
      <link>https://c0ld1nk.github.io/docs/htb/sherlock/bumblebee/</link>
      <pubDate>Fri, 30 May 2025 15:10:35 +0800</pubDate>
      <guid>https://c0ld1nk.github.io/docs/htb/sherlock/bumblebee/</guid>
      <description>&lt;p&gt;解压密码为hacktheblue&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;一名外部承包商通过访客 Wi-Fi 访问了 Forela 的内部论坛，并且似乎窃取了管理员用户的凭证！我们附上了一些论坛日志和完整的 sqlite3 格式数据库转储文件，以协助您的调查。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;task1&#34;&gt;Task1 &lt;a href=&#34;#task1&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;该外部承包商的用户名是什么？&lt;/p&gt;&#xA;&lt;p&gt;apoole&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;提示结尾有个1，在数据库50多项有俩，试了一下第二个是&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531190938380.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task2&#34;&gt;Task2 &lt;a href=&#34;#task2&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;承包商使用哪个 IP 地址创建了他们的账户？&lt;/p&gt;&#xA;&lt;p&gt;10.10.0.78&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531190948848.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task3&#34;&gt;Task3 &lt;a href=&#34;#task3&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;承包商发布的恶意帖子的 post_id 是什么？&lt;/p&gt;&#xA;&lt;p&gt;9&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;phpbb_posts数据库里找&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531191008396.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task4&#34;&gt;Task4 &lt;a href=&#34;#task4&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;凭证窃取程序发送数据的完整 URI 是什么&lt;/p&gt;&#xA;&lt;p&gt;http://10.10.0.78/update.php&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;上一题的posts内容复制本地html打开，login标签找到&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531191102699.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task5&#34;&gt;Task5 &lt;a href=&#34;#task5&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;承包商何时以管理员身份登录论坛？（UTC 时间&lt;/p&gt;&#xA;&lt;p&gt;26/04/2023 10:53:12&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;在phpbb_log找到管理员登录记录，在最后&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531191112172.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;登录操作为post，过滤找到最底下的记录&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531191126822.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;第一个应该就是登录记录26/Apr/2023:11:53:12 +0100，转换成UTC时间减一即可&lt;/p&gt;&#xA;&lt;h1 id=&#34;task6&#34;&gt;Task6 &lt;a href=&#34;#task6&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;论坛中有 LDAP 连接的明文凭证，密码是什么？&lt;/p&gt;&#xA;&lt;p&gt;Passw0rd1&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;在phpbb_config里面找到&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531191140036.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task7&#34;&gt;Task7 &lt;a href=&#34;#task7&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;管理员用户的 User Agent 是什么？&lt;/p&gt;&#xA;&lt;p&gt;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36&lt;/p&gt;</description>
    </item>
    <item>
      <title>Campfire-1</title>
      <link>https://c0ld1nk.github.io/docs/htb/sherlock/campfire-1/</link>
      <pubDate>Fri, 30 May 2025 15:10:35 +0800</pubDate>
      <guid>https://c0ld1nk.github.io/docs/htb/sherlock/campfire-1/</guid>
      <description>&lt;p&gt;解压密码为hacktheblue&lt;/p&gt;&#xA;&lt;h1 id=&#34;task1&#34;&gt;Task1 &lt;a href=&#34;#task1&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;分析域控制器安全日志，您能否确认发生 Kerberoasting 攻击的具体日期和时间？&lt;/p&gt;&#xA;&lt;p&gt;2024-05-21 3:18:09&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;这种攻击方式的流程为：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;发现SPN服务&lt;/li&gt;&#xA;&lt;li&gt;使用工具向 SPN 请求 TGS 票据&lt;/li&gt;&#xA;&lt;li&gt;转储 .kirbi 或 ccache 或服务 HASH 的 TGS 票据&lt;/li&gt;&#xA;&lt;li&gt;将 .kirbi 或 ccache 文件转换为可破解格式&lt;/li&gt;&#xA;&lt;li&gt;使用hashcat等工具配合字典进行暴力破解&#xA;也就是要请求tgs票据，id为4769的日志记录此事件&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531192216982.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;翻找发现mysql服务，别的都是域控服务，大概率就是这个&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531192228019.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;转化为utc+0时间&lt;/p&gt;&#xA;&lt;h1 id=&#34;task2&#34;&gt;Task2 &lt;a href=&#34;#task2&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;被攻击的服务名称是什么？&lt;/p&gt;&#xA;&lt;p&gt;MSSQLService&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;见上一题&lt;/p&gt;&#xA;&lt;h1 id=&#34;task3&#34;&gt;Task3 &lt;a href=&#34;#task3&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;识别发生此活动的工作站至关重要。该工作站的 IP 地址是什么？&lt;/p&gt;&#xA;&lt;p&gt;172.17.79.129&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;见上一题，日志里有客户端地址&lt;/p&gt;&#xA;&lt;h1 id=&#34;task4&#34;&gt;Task4 &lt;a href=&#34;#task4&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;既然我们已经定位到该工作站，现为您提供包括 PowerShell 日志和预取文件在内的诊断数据，以便深入分析，从而了解该端点上的活动是如何发生的。用于枚举 Active Directory 对象并可能在网络中查找可 Kerberoast 账户的文件名称是什么？&lt;/p&gt;&#xA;&lt;p&gt;powerview.ps1&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;打开powershell日志，4104为执行命令，依次翻找，找到绕过限制执行ps文件&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531192304506.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;那下一条应该就是具体的文件位置&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531192315453.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;找到文件路径&lt;/p&gt;&#xA;&lt;h1 id=&#34;task5&#34;&gt;Task5 &lt;a href=&#34;#task5&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;该脚本是何时执行的？&lt;/p&gt;</description>
    </item>
    <item>
      <title>Meerkat</title>
      <link>https://c0ld1nk.github.io/docs/htb/sherlock/meerkat/</link>
      <pubDate>Fri, 30 May 2025 15:10:35 +0800</pubDate>
      <guid>https://c0ld1nk.github.io/docs/htb/sherlock/meerkat/</guid>
      <description>&lt;p&gt;解压密码为hacktheblue&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;作为一家快速发展的初创公司，Forela 一直在使用业务管理平台。遗憾的是，我们的文档匮乏，且管理员的安全意识较为薄弱。作为新任安全服务提供商，我们希望您能查看我们导出的部分 PCAP 和日志数据，以确认我们是否遭受（或未遭受）入侵。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;task1&#34;&gt;Task1 &lt;a href=&#34;#task1&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;我们怀疑业务管理平台服务器可能已遭入侵。请确认当前运行的应用程序名称？&lt;/p&gt;&#xA;&lt;p&gt;Bonitasoft&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;wireshark-统计-端点-TCP-按照流量包大小排序&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531185617390.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;能看见一个外部地址发包最多，其次是内网地址的三个端口，猜测第一个为攻击者ip，8080为服务端口，过滤此端口&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xA;  &lt;pre id=&#34;f284b17&#34; class=&#34;language-wireshark &#34;&gt;&#xA;  &lt;code&gt;ip.dst==172.31.6.44 &amp;amp;&amp;amp; tcp.port==8080&lt;/code&gt;&#xA;  &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;p&gt;找到访问记录；&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531185706743.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;搜索得知软件名称&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531185716941.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task2&#34;&gt;Task2 &lt;a href=&#34;#task2&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;我们相信攻击者可能使用了暴力破解攻击类别的一个子集——所进行的攻击名称是什么？&lt;/p&gt;&#xA;&lt;p&gt;Credential Stuffing&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;按照info和time排序，找到爆破行为：&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531185726750.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;查看&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531185740848.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531185750928.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;不像是暴力，更像是撞库&lt;/p&gt;&#xA;&lt;h1 id=&#34;task3&#34;&gt;Task3 &lt;a href=&#34;#task3&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;被利用的漏洞是否分配有 CVE 编号？如果有，是哪一个？&lt;/p&gt;&#xA;&lt;p&gt;CVE-2022-25237&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;能看见访问了这个路由&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531185807718.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;搜索得到编号，&lt;a href=&#34;https://zhuanlan.zhihu.com/p/575580483&#34; rel=&#34;external&#34; target=&#34;_blank&#34;&gt;CVE-2022-25237&lt;svg width=&#34;16&#34; height=&#34;16&#34; viewBox=&#34;0 0 24 24&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z&#34;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Noxious</title>
      <link>https://c0ld1nk.github.io/docs/htb/sherlock/noxious/</link>
      <pubDate>Fri, 30 May 2025 15:10:35 +0800</pubDate>
      <guid>https://c0ld1nk.github.io/docs/htb/sherlock/noxious/</guid>
      <description>&lt;p&gt;解压密码为hacktheblue&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;入侵检测系统（IDS）设备发出警报，提示内部 Active Directory 网络中可能存在恶意设备。该系统还监测到异常的 LLMNR 协议流量，怀疑发生了 LLMNR 投毒攻击。异常流量指向 IP 地址为 172.17.79.136 的 Forela-WKstn002 工作站。作为网络取证专家，您已获得事发时段的部分数据包捕获文件。鉴于事件发生在 Active Directory 虚拟局域网内，建议结合 AD 攻击向量开展网络威胁狩猎，重点关注 LLMNR 投毒攻击。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;task1&#34;&gt;Task1 &lt;a href=&#34;#task1&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;安全团队怀疑 Forela 内网中存在运行 Responder 工具的恶意设备实施 LLMNR 投毒攻击。请定位该恶意设备的 IP 地址。&lt;/p&gt;&#xA;&lt;p&gt;172.17.79.135&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;LLMNR协议在UDP 5355，所以过滤&lt;code&gt;udp.port==5355&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531192540557.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;能看到&lt;code&gt;172.17.79.135&lt;/code&gt;对工作站&lt;code&gt;172.17.79.136&lt;/code&gt;的LLMNR查询进行了回应，冒充了dc&#xA;答案就是172.17.79.135&lt;/p&gt;&#xA;&lt;h1 id=&#34;task2&#34;&gt;Task2 &lt;a href=&#34;#task2&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;被入侵机器的主机名是什么？&lt;/p&gt;&#xA;&lt;p&gt;kali&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;过滤此ip，&lt;code&gt;ip.addr==172.17.79.135&lt;/code&gt;，有一个dhcp请求分配动态ip，里面有主机名称&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531192553900.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;答案是kali&lt;/p&gt;&#xA;&lt;h1 id=&#34;task3&#34;&gt;Task3 &lt;a href=&#34;#task3&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;现在我们需要确认攻击者是否获取了用户哈希值且该哈希可被破解！！被捕获哈希的用户名是什么？&lt;/p&gt;&#xA;&lt;p&gt;john.deacon&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;还是过滤上面的ip，有一条登录cookie数据包，说明攻击者成功破解密码并破解&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531192606252.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;答案是john.deacon&lt;/p&gt;&#xA;&lt;h1 id=&#34;task4&#34;&gt;Task4 &lt;a href=&#34;#task4&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;在 NTLM 流量中可以看到受害者的凭证被多次中继到攻击者的机器上。这些哈希值首次是在何时被捕获的？&lt;/p&gt;&#xA;&lt;p&gt;2024-06-24 11:18:30&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;ntml协议通常使用HTTP、SMB、SMTP，查看协议占比可知smb2占比最多&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531192614238.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;过滤smb2协议&#xA;搜索dcc01，能找到工作站请求NTLM认证。从这里开始进行中间人劫持哈希。&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531192623997.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;答案是2024-06-24 11:18:30（ 注意是 UTC+0）&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit42</title>
      <link>https://c0ld1nk.github.io/docs/htb/sherlock/unit42/</link>
      <pubDate>Fri, 30 May 2025 15:10:35 +0800</pubDate>
      <guid>https://c0ld1nk.github.io/docs/htb/sherlock/unit42/</guid>
      <description>&lt;p&gt;解压密码为hacktheblue&lt;/p&gt;&#xA;&lt;p&gt;附件是一个evtx文件，windows事件查看器能直接打开&#xA;附上sysmon事件id表&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531190225279.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task1&#34;&gt;Task1 &lt;a href=&#34;#task1&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;事件 ID 为 11 的日志记录共有多少条？&lt;/p&gt;&#xA;&lt;p&gt;56&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;筛选就能知道&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531190057112.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task2&#34;&gt;Task2 &lt;a href=&#34;#task2&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;每当在内存中创建一个进程时，都会记录一个事件 ID 为 1 的事件，其中包含命令行、哈希值、进程路径、父进程路径等详细信息。这些信息对分析师非常有用，因为它允许我们查看系统上执行的所有程序，这意味着我们可以发现任何正在执行的恶意进程。受害者系统感染的恶意进程是什么？&lt;/p&gt;&#xA;&lt;p&gt;C:\Users\CyberJunkie\Downloads\Preventivo24.02.14.exe.exe&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;过滤id位1的事件，第二个的程序不正常&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531190211879.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task3&#34;&gt;Task3 &lt;a href=&#34;#task3&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;哪种云盘被用来分发恶意软件？&lt;/p&gt;&#xA;&lt;p&gt;dropbox&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;查表，22是dns查询，翻id为22的事件，找到一个特殊域名&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531190520080.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;确认是云盘&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531190532842.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task4&#34;&gt;Task4 &lt;a href=&#34;#task4&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;对于许多写入磁盘的文件，初始恶意文件采用了一种名为“时间戳伪造”的防御规避技术，即更改文件创建日期使其显得更旧，从而与其他文件混为一体。PDF 文件的时间戳被修改为何时？&lt;/p&gt;&#xA;&lt;p&gt;2024-01-14 08:10:06.029&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;过滤事件id=2，搜索pdf&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531190542932.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;日志是2-14号的，做旧就是1-14了&lt;/p&gt;&#xA;&lt;h1 id=&#34;task5&#34;&gt;Task5 &lt;a href=&#34;#task5&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;恶意文件在磁盘上释放了几个文件。&amp;ldquo;once.cmd&amp;quot;是在磁盘的哪个位置创建的？请提供包含文件名的完整路径作为答案。&lt;/p&gt;&#xA;&lt;p&gt;C:\Users\CyberJunkielAppData\Roaming\Photo and fax Vn\Photo and vn 1.1.2\install\F97891C\WindowsVolumel\Games\once.cmd&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;过滤事件id=11，搜索once.cmd&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531190555061.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task6&#34;&gt;Task6 &lt;a href=&#34;#task6&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;该恶意文件尝试连接一个虚拟域名，很可能是为了检测网络连接状态。它试图连接的域名是什么？&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.example.com&#34; rel=&#34;external&#34; target=&#34;_blank&#34;&gt;www.example.com&lt;svg width=&#34;16&#34; height=&#34;16&#34; viewBox=&#34;0 0 24 24&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z&#34;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Brutus</title>
      <link>https://c0ld1nk.github.io/docs/htb/sherlock/brutus/</link>
      <pubDate>Fri, 30 May 2025 10:51:07 +0800</pubDate>
      <guid>https://c0ld1nk.github.io/docs/htb/sherlock/brutus/</guid>
      <description>&lt;p&gt;解压密码为hacktheblue&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在这个非常简单的 Sherlock 任务中，您将熟悉 Unix 系统的 auth.log 和 wtmp 日志。我们将探讨一个 Confluence 服务器通过 SSH 服务遭受暴力破解的场景。攻击者获取服务器访问权限后，还进行了其他活动，这些都可以通过 auth.log 追踪。尽管 auth.log 主要用于暴力破解分析，但在本次调查中，我们将深入挖掘这一日志的全部潜力，包括权限提升、持久化攻击的迹象，甚至部分命令执行的可见性。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;task1&#34;&gt;Task1 &lt;a href=&#34;#task1&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;分析 auth.log 日志。攻击者用于实施暴力破解攻击的 IP 地址是什么？&lt;/p&gt;&#xA;&lt;p&gt;65.2.161.68&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250530222308030.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task2&#34;&gt;Task2 &lt;a href=&#34;#task2&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;识别攻击者手动登录服务器以执行其目标的时间戳。登录时间将与认证时间不同，可在 wtmp 记录中找到。&lt;/p&gt;&#xA;&lt;p&gt;root&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531185222568.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task3&#34;&gt;Task3 &lt;a href=&#34;#task3&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;识别攻击者手动登录服务器以执行其目标的时间戳。登录时间将与认证时间不同，可在 wtmp 记录中找到。&lt;/p&gt;&#xA;&lt;p&gt;2024-03-06 06:32:45&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;分析wtmp文件即可&lt;/p&gt;&#xA;&lt;h1 id=&#34;task4&#34;&gt;Task4 &lt;a href=&#34;#task4&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;SSH 登录会话在登录时会被跟踪并分配一个会话编号。攻击者针对问题 2 中用户账户的会话被分配了哪个会话编号？&lt;/p&gt;&#xA;&lt;p&gt;37&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531185222568.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task5&#34;&gt;Task5 &lt;a href=&#34;#task5&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;攻击者在服务器上添加了一个新用户作为其持久化策略的一部分，并赋予该新用户账户更高的权限。这个账户的名称是什么？&lt;/p&gt;&#xA;&lt;p&gt;cyberjunkie&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;    &lt;img src=&#34;https://gitee.com/inklong/blog-pic/raw/master/images/20250531185353805.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34;&gt;&#xA;  &#xA;&lt;/p&gt;&#xA;&lt;h1 id=&#34;task6&#34;&gt;Task6 &lt;a href=&#34;#task6&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;用于通过创建新账户实现持久化的 MITRE ATT&amp;amp;CK 子技术 ID 是什么？&lt;/p&gt;</description>
    </item>
    <item>
      <title>RCE</title>
      <link>https://c0ld1nk.github.io/docs/ctf/%E7%9F%A5%E8%AF%86%E7%82%B9/rce/</link>
      <pubDate>Fri, 30 May 2025 10:12:11 +0800</pubDate>
      <guid>https://c0ld1nk.github.io/docs/ctf/%E7%9F%A5%E8%AF%86%E7%82%B9/rce/</guid>
      <description>&lt;h1 id=&#34;php&#34;&gt;PHP &lt;a href=&#34;#php&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;基本函数&#34;&gt;基本函数 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;1.&lt;code&gt;eval()&lt;/code&gt;可以将传入的字符串当作php代码执行&#xA;解题时常用的指令：&lt;code&gt;phpinfo()&lt;/code&gt;查看是否有回显&#xA;system()指令用于执行系统命令，如&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xA;  &lt;pre id=&#34;58ae8ef&#34; class=&#34;language-php &#34;&gt;&#xA;  &lt;code&gt;system(&amp;#39;ls&amp;#39;);&#xA;system(&amp;#39;cat&amp;#39;);&#xA;//记得在每一条指令后面加；&lt;/code&gt;&#xA;  &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;p&gt;其它函数：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xA;  &lt;pre id=&#34;970f1de&#34; class=&#34;language-php &#34;&gt;&#xA;  &lt;code&gt;//具体函数内容查看手册&#xA;exec&#xA;shell_exec&#xA;passthru&#xA;popen&#xA;proc_popen&#xA;Assert(mixed $assertion,string $description = ?)&#xA;//会检查assertion，如果是字符串，会被当成php代码执行&#xA;Call_user_func(callable $callback …..)&#xA;//callback是被调用的回调函数&#xA;Call_user_func_array(callable $callback)&#xA;//同上&#xA;Creat_function(args,code)&#xA;//如&#xA;&amp;lt;?php&#xA;error_reporting(0);&#xA;$new_func = create_function(&amp;#39;$a,$b&amp;#39;,&amp;#39;return &amp;#34;$a  &amp;#34;.&amp;#34;$b&amp;#34;;&amp;#39;);//new_func为函数名，$a $b为参数，后面代码&#xA;echo $new_func(&amp;#39;hello&amp;#39;,&amp;#39;hack&amp;#39;).&amp;#34;\n&amp;#34;;&#xA;?&amp;gt;&lt;/code&gt;&#xA;  &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;p&gt;连接两个命令&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xA;  &lt;pre id=&#34;2c5b2cc&#34; class=&#34;language- &#34;&gt;&#xA;  &lt;code&gt;|&#xA;||&#xA;&amp;amp;&#xA;&amp;amp;&amp;amp;&#xA;;&lt;/code&gt;&#xA;  &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;h2 id=&#34;绕过&#34;&gt;绕过 &lt;a href=&#34;#%e7%bb%95%e8%bf%87&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;简单绕过关键词过滤&lt;code&gt;a=eval($_GET[&#39;A&#39;])&amp;amp;A=system&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;内联执行：cat `ls`，echo $(ls)&lt;/li&gt;&#xA;&lt;li&gt;使用&amp;rsquo;&amp;lsquo;包裹一组指令 &lt;code&gt;(&#39;ls /&#39;)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;绕过内置过滤函数&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xA;  &lt;pre id=&#34;d8357b2&#34; class=&#34;language-php &#34;&gt;&#xA;  &lt;code&gt;$url=escapeshellarg($url);&#xA;&#xA;$url=escapeshellcmd($url);&#xA;/*&#xA;连用会产生单引号逃逸，传入1&amp;#39; xxx&#xA;返回&amp;#39;1&amp;#39;\\&amp;#39;&amp;#39;XXX\&amp;#39;&#xA;\被转义，还多出来一个&amp;#39;&#xA;*/&lt;/code&gt;&#xA;  &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;p&gt;绕过文件名限制&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pickle反序列化</title>
      <link>https://c0ld1nk.github.io/docs/ctf/%E7%9F%A5%E8%AF%86%E7%82%B9/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Fri, 30 May 2025 09:41:09 +0800</pubDate>
      <guid>https://c0ld1nk.github.io/docs/ctf/%E7%9F%A5%E8%AF%86%E7%82%B9/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <description>&lt;h1 id=&#34;可被序列化的目标&#34;&gt;可被序列化的目标： &lt;a href=&#34;#%e5%8f%af%e8%a2%ab%e5%ba%8f%e5%88%97%e5%8c%96%e7%9a%84%e7%9b%ae%e6%a0%87&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;&#xA;&lt;li&gt;None，True，False&lt;/li&gt;&#xA;&lt;li&gt;整数，浮点数，复数&lt;/li&gt;&#xA;&lt;li&gt;str，byte，bytearray&lt;/li&gt;&#xA;&lt;li&gt;只包含可序列化对象的集合：tuple，list，set，dict&lt;/li&gt;&#xA;&lt;li&gt;定义在模块最外层的函数，指使用def定义的函数，而不是lambda&lt;/li&gt;&#xA;&lt;li&gt;定义在模块最外层的内置函数&lt;/li&gt;&#xA;&lt;li&gt;定义在模块最外层的类&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;__dict__&lt;/code&gt; 属性值或者&lt;code&gt;__getstate__()&lt;/code&gt;函数返回值可以被序列化的类&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;反序列化过程&#34;&gt;反序列化过程 &lt;a href=&#34;#%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e8%bf%87%e7%a8%8b&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;pickle反序列化依靠PVM（Pickle Virtual Machine）进行。&#xA;其涉及三个部分：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;解析引擎&lt;/li&gt;&#xA;&lt;li&gt;存放到栈&lt;/li&gt;&#xA;&lt;li&gt;存储到内存&#xA;解析引擎：从流中读取opcode和参数，对其进行解释处理，直到遇到&lt;code&gt;.&lt;/code&gt;停止，最后留在栈顶的值就是反序列化对象。&#xA;栈：由list实现，存储临时对象，参数以及对象&#xA;内存memo：由dict实现，为PVM的生命周期提供存储，即将反序列化完成的数据以&lt;code&gt;key-value&lt;/code&gt;的形式存在memo中以供后面使用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;opcode&#34;&gt;opcode &lt;a href=&#34;#opcode&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;pickle在由不同的实现版本，在py2和3得到的opcode不相同，但各个版本可以向下兼容。目前有六个版本：&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xA;  &lt;pre id=&#34;b9bb5dd&#34; class=&#34;language-python &#34;&gt;&#xA;  &lt;code&gt;import pickle&#xA;&#xA;a={&amp;#39;1&amp;#39;: 1, &amp;#39;2&amp;#39;: 2}&#xA;&#xA;print(f&amp;#39;# 原变量：{a!r}&amp;#39;)&#xA;for i in range(4):&#xA;    print(f&amp;#39;pickle版本{i}&amp;#39;,pickle.dumps(a,protocol=i))&lt;/code&gt;&#xA;  &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xA;  &lt;pre id=&#34;2e26bc1&#34; class=&#34;language-text &#34;&gt;&#xA;  &lt;code&gt;# 原变量：{&amp;#39;1&amp;#39;: 1, &amp;#39;2&amp;#39;: 2}&#xA;pickle版本0 b&amp;#39;(dp0\nV1\np1\nI1\nsV2\np2\nI2\ns.&amp;#39;&#xA;pickle版本1 b&amp;#39;}q\x00(X\x01\x00\x00\x001q\x01K\x01X\x01\x00\x00\x002q\x02K\x02u.&amp;#39;&#xA;pickle版本2 b&amp;#39;\x80\x02}q\x00(X\x01\x00\x00\x001q\x01K\x01X\x01\x00\x00\x002q\x02K\x02u.&amp;#39;&#xA;pickle版本3 b&amp;#39;\x80\x03}q\x00(X\x01\x00\x00\x001q\x01K\x01X\x01\x00\x00\x002q\x02K\x02u.&amp;#39;&#xA;pickle版本4 b&amp;#39;\x80\x04\x95\x11\x00\x00\x00\x00\x00\x00\x00}\x94(\x8c\x011\x94K\x01\x8c\x012\x94K\x02u.&amp;#39;&lt;/code&gt;&#xA;  &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;p&gt;pickle3版本opcode示例：&#xA;原数据：&lt;code&gt;abcd&lt;/code&gt;&#xA;&lt;code&gt;b&#39;\x80\x03X\x04\x00\x00\x00abcdq\x00.&#39;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;\x80&lt;/code&gt;：协议头声明，读取此字符串后，会再读取一个字节&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;\x03&lt;/code&gt;：协议版本&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;\x04\x00\x00\x00&lt;/code&gt;：数据长度：4&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;abcd&lt;/code&gt;数据&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;q&lt;/code&gt;存储在栈顶的字符串长度&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;\x00&lt;/code&gt;栈顶位置，一个字节&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;.&lt;/code&gt;数据截止&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;b&#39;\x80\x03c__main__\nStudent\n)\x81}(Vname\nVrxz\nVgrade\nVG2\nub.&#39;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>NodeJs</title>
      <link>https://c0ld1nk.github.io/docs/ctf/%E7%9F%A5%E8%AF%86%E7%82%B9/nodejs/</link>
      <pubDate>Thu, 29 May 2025 16:38:45 +0800</pubDate>
      <guid>https://c0ld1nk.github.io/docs/ctf/%E7%9F%A5%E8%AF%86%E7%82%B9/nodejs/</guid>
      <description>&lt;h1 id=&#34;命令执行&#34;&gt;命令执行 &lt;a href=&#34;#%e5%91%bd%e4%bb%a4%e6%89%a7%e8%a1%8c&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xA;  &lt;pre id=&#34;298affe&#34; class=&#34;language-js &#34;&gt;&#xA;  &lt;code&gt;require(&amp;#39;child_process&amp;#39;).exec(&amp;#39;ls&amp;#39;); //返回值是child_process，不能转字符串&#xA;require(&amp;#39;child_process&amp;#39;).execSync(&amp;#39;ls&amp;#39;).toString(); //返回值是字符串&#xA;require(&amp;#39;child_process&amp;#39;).spawnSync(&amp;#39;ls&amp;#39;).stdout.toString();// 返回object，toString转成字符串&#xA;//绕过简单的限制&#xA;require(&amp;#39;child_process&amp;#39;)[&amp;#39;exe&amp;#39;&amp;#43;&amp;#39;cSync&amp;#39;](&amp;#39;ls&amp;#39;).toString()&lt;/code&gt;&#xA;  &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;p&gt;不用&lt;code&gt;child_process&lt;/code&gt;读取文件&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xA;  &lt;pre id=&#34;b75ef0f&#34; class=&#34;language-js &#34;&gt;&#xA;  &lt;code&gt;__filename //获取当前文件的绝对路径&#xA;__dirname //获取当前文件解析过后的文件夹的绝对路径&#xA;require(&amp;#39;fs&amp;#39;).readFileSync(__filename,&amp;#39;utf-8&amp;#39;); //读取当前文件&#xA;require(&amp;#39;fs&amp;#39;).readdirSync(&amp;#39;.&amp;#39;) //读取当前目录下所有文件&lt;/code&gt;&#xA;  &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;h1 id=&#34;md5&#34;&gt;md5 &lt;a href=&#34;#md5&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xA;  &lt;pre id=&#34;6111101&#34; class=&#34;language-js &#34;&gt;&#xA;  &lt;code&gt;if(a &amp;amp;&amp;amp; b &amp;amp;&amp;amp; a.length===b.length &amp;amp;&amp;amp; a!==b &amp;amp;&amp;amp; md5(a&amp;#43;flag)===md5(b&amp;#43;flag))&lt;/code&gt;&#xA;  &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;传入a[]=1&amp;amp;b[]=2&#xA;得到的是[&amp;lsquo;1&amp;rsquo;]和[&amp;lsquo;2&amp;rsquo;]&#xA;而nodejs中数组和字符串的拼接如下：&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xA;  &lt;pre id=&#34;a825148&#34; class=&#34;language-js &#34;&gt;&#xA;  &lt;code&gt;console.log(5&amp;#43;[6,6]); //56,6&#xA;console.log(&amp;#34;5&amp;#34;&amp;#43;6); //56&#xA;console.log(&amp;#34;5&amp;#34;&amp;#43;[6,6]); //56,6&#xA;console.log(&amp;#34;5&amp;#34;&amp;#43;[&amp;#34;6&amp;#34;,&amp;#34;6&amp;#34;]); //56,6&lt;/code&gt;&#xA;  &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;则[&amp;lsquo;a&amp;rsquo;]+flag== &amp;lsquo;a&amp;rsquo;+flag&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;如果传入的是非数字索引，比如&lt;code&gt;[x]=1&lt;/code&gt;，那么就会变为js的对象&lt;code&gt;{x:&#39;1&#39;}&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xA;  &lt;pre id=&#34;0138822&#34; class=&#34;language-js &#34;&gt;&#xA;  &lt;code&gt;let a={&#xA;    x:&amp;#39;1&amp;#39;&#xA;}&#xA;console.log(a&amp;#43;&amp;#34;flag{123}&amp;#34;)&#xA;//返回的是： [object Object]flag{123}&lt;/code&gt;&#xA;  &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;所以传入a[x]=1&amp;amp;b[x]=1也能绕过，此时&lt;code&gt;a!==b&lt;/code&gt;比较的是内存地址，而不是键值。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;原型链污染&#34;&gt;原型链污染 &lt;a href=&#34;#%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;  &#xA;  &#xA;  &#xA;&#xA;  &#xA;&#xA;  &lt;div class=&#34;prism-codeblock &#34;&gt;&#xA;  &lt;pre id=&#34;7faf206&#34; class=&#34;language-js &#34;&gt;&#xA;  &lt;code&gt;//定义一个类&#xA;function Foo() {&#xA;    this.bar = 1&#xA;}&#xA;&#xA;new Foo()&#xA;&#xA;//类内的方法&#xA;function Foo() {&#xA;    this.bar = 1&#xA;    this.show = function() {&#xA;        console.log(this.bar)&#xA;        this.bar=this.bar&amp;#43;1&#xA;    }&#xA;}&#xA;&#xA;(new Foo()).show() //输出1&#xA;//但是每次新建一个foo对象，this.show就会执行一次，show方法是绑定在对象上的，而不是绑定在类上&#xA;//使用原型prototype创建类时，就会只创建一次show方法。&#xA;function Foo() {&#xA;    this.bar = 1&#xA;}&#xA;&#xA;Foo.prototype.show = function show() {&#xA;    console.log(this.bar)&#xA;}&#xA;&#xA;let foo = new Foo()&#xA;foo.show() //输出1&#xA;//原型prototype是类Foo的一个属性，所有实例化的对象，都有这个熟悉的内容。&#xA;//foo对象天生就有show方法&#xA;//通过proto属性可以访问类的原型，即：&#xA;foo.__proto__==Foo.prototype&lt;/code&gt;&#xA;  &lt;/pre&gt;&#xA;  &lt;/div&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;总结：&#xA;&lt;code&gt;prototype&lt;/code&gt;是一个类的属性，所有类对象实例化时都会有&lt;code&gt;prototype&lt;/code&gt;中的属性和方法&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
